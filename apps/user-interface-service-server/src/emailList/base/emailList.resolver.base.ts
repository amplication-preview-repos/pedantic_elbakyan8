/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailList } from "./EmailList";
import { EmailListCountArgs } from "./EmailListCountArgs";
import { EmailListFindManyArgs } from "./EmailListFindManyArgs";
import { EmailListFindUniqueArgs } from "./EmailListFindUniqueArgs";
import { CreateEmailListArgs } from "./CreateEmailListArgs";
import { UpdateEmailListArgs } from "./UpdateEmailListArgs";
import { DeleteEmailListArgs } from "./DeleteEmailListArgs";
import { EmailListService } from "../emailList.service";
@graphql.Resolver(() => EmailList)
export class EmailListResolverBase {
  constructor(protected readonly service: EmailListService) {}

  async _emailListsMeta(
    @graphql.Args() args: EmailListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailList])
  async emailLists(
    @graphql.Args() args: EmailListFindManyArgs
  ): Promise<EmailList[]> {
    return this.service.emailLists(args);
  }

  @graphql.Query(() => EmailList, { nullable: true })
  async emailList(
    @graphql.Args() args: EmailListFindUniqueArgs
  ): Promise<EmailList | null> {
    const result = await this.service.emailList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailList)
  async createEmailList(
    @graphql.Args() args: CreateEmailListArgs
  ): Promise<EmailList> {
    return await this.service.createEmailList({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailList)
  async updateEmailList(
    @graphql.Args() args: UpdateEmailListArgs
  ): Promise<EmailList | null> {
    try {
      return await this.service.updateEmailList({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailList)
  async deleteEmailList(
    @graphql.Args() args: DeleteEmailListArgs
  ): Promise<EmailList | null> {
    try {
      return await this.service.deleteEmailList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
